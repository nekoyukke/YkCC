{
    "sourceFile": "src/conpiler/BASIC/parse.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1760705332396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760705398046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,15 +173,48 @@\n                 res += f\"; goto{numtok.value}\\n\"\r\n                 res += f\"JMP LINE{numtok.value}\\n\"\r\n                 return res\r\n             case \"FOR\":\r\n-                \r\n+                ad()\r\n+                mem = allocmem()\r\n+                nametok = ex(\"IDENT\", \"NOT HAVE IDENT\")\r\n+                if not ex(\"OP\", \"NOT HAVE =\").value == \"=\":\r\n+                    print(\"NOT HAVE =\")\r\n+                    return \"\"\r\n+                # 式\r\n+                computed = compute()\r\n+                res += \"; FOR INDENT\\n\"\r\n+                Variable[nametok.value] = mem\r\n+                # 次\r\n+                if not ex(\"KEYWORD\", \"NOTHAVE 'TO'\").value == \"TO\":\r\n+                    print(\"NOT HAVE 'TO'\")\r\n+                    return \"\"\r\n+                computed = compute()\r\n+                # レジスタを開放\r\n+                ex(\"NEWLINE\", \"NONE NEWLINE\")\r\n+                res += stmt()\r\n+                print(\"END LOOP\")\r\n+                # NEXT後の処理\r\n+                reg = allocreg()\r\n+                res += \"; inc mem\\n\"\r\n+                res += f\"FORLOOP{number}:\\n\"\r\n+                res += f\"GET r{reg}, {mem}\\n\"\r\n+                res += f\"INC r{reg}\\n\"\r\n+                res += f\"SET {mem}, r{reg}\\n\"\r\n+                # もしなら\r\n+                res += \"; CMP for registr\\n\"\r\n+                res += f\"CMPI r{reg}, r{computed[1][0]}\\n\"\r\n+                res += f\"JNE FORLOOP{number}\"\r\n+                res += f\"; END\"\r\n+                freereg(computed[1][0])\r\n+                freereg(reg)\r\n                 return res\r\n             case \"NEXT\":\r\n                 return \"@BL@\"\r\n             case \"PRINT\":\r\n                 res += \"; PRINT\\n\"\r\n                 computed = compute()\r\n+                computed = compute()\r\n                 return res\r\n             case \"INPUT\":\r\n                 return res\r\n             case \"END\":\r\n"
                },
                {
                    "date": 1760705430566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,10 @@\n                 return \"@BL@\"\r\n             case \"PRINT\":\r\n                 res += \"; PRINT\\n\"\r\n                 computed = compute()\r\n-                computed = compute()\r\n+                computed2 = compute()\r\n+\r\n                 return res\r\n             case \"INPUT\":\r\n                 return res\r\n             case \"END\":\r\n"
                },
                {
                    "date": 1760705444504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,9 @@\n             case \"PRINT\":\r\n                 res += \"; PRINT\\n\"\r\n                 computed = compute()\r\n                 computed2 = compute()\r\n-\r\n+                computed\r\n                 return res\r\n             case \"INPUT\":\r\n                 return res\r\n             case \"END\":\r\n"
                },
                {
                    "date": 1760705488653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,8 @@\n             case \"PRINT\":\r\n                 res += \"; PRINT\\n\"\r\n                 computed = compute()\r\n                 computed2 = compute()\r\n-                computed\r\n                 return res\r\n             case \"INPUT\":\r\n                 return res\r\n             case \"END\":\r\n"
                },
                {
                    "date": 1760705489021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,8 +213,9 @@\n             case \"PRINT\":\r\n                 res += \"; PRINT\\n\"\r\n                 computed = compute()\r\n                 computed2 = compute()\r\n+                \r\n                 return res\r\n             case \"INPUT\":\r\n                 return res\r\n             case \"END\":\r\n"
                },
                {
                    "date": 1760705495763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,9 @@\n             case \"PRINT\":\r\n                 res += \"; PRINT\\n\"\r\n                 computed = compute()\r\n                 computed2 = compute()\r\n-                \r\n+                res += \"\"\r\n                 return res\r\n             case \"INPUT\":\r\n                 return res\r\n             case \"END\":\r\n"
                },
                {
                    "date": 1760705501869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,9 @@\n             case \"PRINT\":\r\n                 res += \"; PRINT\\n\"\r\n                 computed = compute()\r\n                 computed2 = compute()\r\n-                res += \"\"\r\n+                res += \"; PRINT \"\r\n                 return res\r\n             case \"INPUT\":\r\n                 return res\r\n             case \"END\":\r\n"
                },
                {
                    "date": 1760705507993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,10 @@\n             case \"PRINT\":\r\n                 res += \"; PRINT\\n\"\r\n                 computed = compute()\r\n                 computed2 = compute()\r\n-                res += \"; PRINT \"\r\n+                res += \"; PRINT COMMAND\\n\"\r\n+                \r\n                 return res\r\n             case \"INPUT\":\r\n                 return res\r\n             case \"END\":\r\n"
                },
                {
                    "date": 1760705518460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,9 +214,9 @@\n                 res += \"; PRINT\\n\"\r\n                 computed = compute()\r\n                 computed2 = compute()\r\n                 res += \"; PRINT COMMAND\\n\"\r\n-                res += f\"; \"\r\n+                res += f\"MOV\"\r\n                 return res\r\n             case \"INPUT\":\r\n                 return res\r\n             case \"END\":\r\n"
                },
                {
                    "date": 1760705723359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,15 +242,15 @@\n                 return res\r\n             case \"FUNC\":\r\n                 return res\r\n             case \"RET\":\r\n-                res += \"; RET\"\r\n-                res += \"RET\"\r\n+                res += \"; RET\\n\"\r\n+                res += \"RET\\n\"\r\n                 return res\r\n             case \"GOSUB\":\r\n                 numtok = ex(\"NUMBER\", \"number is no\")\r\n                 res += \"; subroutine GO\\n\"\r\n-                res += f\"CALL LINE{numtok}\"\r\n+                res += f\"CALL LINE{numtok}\\n\"\r\n                 return res\r\n             case _:\r\n                 # パスする\r\n                 return \"\"\r\n"
                }
            ],
            "date": 1760705332396,
            "name": "Commit-0",
            "content": "\"\"\"\r\nlexerからのものを解析しYkIRを出力\r\n構文:\r\nLET 変数名 = 式\r\n\r\n(+,1,2)で区切る\r\n\r\nIF 式 比較記号 式 THEN 番号 ELSE 番号\r\n\r\n\"\"\"\r\nfrom lexer import Token\r\n\r\ndef parse(source:str, tokens:list[Token], addr:list[int] = [], reg:list[int] = [], Subreg:list[int] = []):\r\n    pos:int = 0\r\n    line:list[str] = []\r\n    useingaddress:list[int] = []\r\n    useingaddress+=addr\r\n    useingreg: list[int] = reg\r\n    useingSubroutinereg: list[int] = Subreg\r\n    Variable:dict[str,int] = {} # 名前:番地\r\n    number:int = 0\r\n    def ad():\r\n        nonlocal pos\r\n        pos += 1\r\n        if len(tokens) <= pos:\r\n            print(f\"out of range of pos. now pos token:{tokens[pos-1]}\")\r\n            raise RuntimeError(f\"out of range of pos. now pos token:{tokens[pos-1]}\")\r\n    def cu():\r\n        return tokens[pos]\r\n    def ex(tt:str, message:str):\r\n        if tt != cu().type:\r\n            print(message, cu())\r\n            raise RuntimeError(f\"{message}{cu()}\")\r\n        res = cu()\r\n        ad()\r\n        return res\r\n    def allocmem():\r\n        n = 0\r\n        while True:\r\n            if n not in useingaddress:\r\n                useingaddress.append(n)\r\n                return n\r\n            n += 1\r\n    def freemem(number:int):\r\n        useingaddress.pop(useingaddress.index(number))\r\n    def allocreg():\r\n        n = 0\r\n        while True:\r\n            if n not in useingreg:\r\n                useingreg.append(n)\r\n                return n\r\n            n += 1\r\n    def freereg(number:int):\r\n        useingreg.pop(useingreg.index(number))\r\n    def stmt():\r\n        assembly = \"\"\r\n        while cu().type != \"EOF\":\r\n            strs = expr()\r\n            if strs == \"@BL@\":\r\n                # expr() returned NEXT signal: consume the NEXT keyword and its newline\r\n                if cu().type == \"KEYWORD\" and cu().value == \"NEXT\":\r\n                    ad()  # consume NEXT\r\n                    if cu().type == \"NEWLINE\":\r\n                        ad()  # consume newline after NEXT\r\n                break\r\n            assembly += strs + \"\\n\"\r\n            if cu().type == \"EOF\":\r\n                break\r\n            if cu().type == \"NEWLINE\":\r\n                ad()\r\n            else:\r\n                continue\r\n        return assembly\r\n    def expr():\r\n        nonlocal line, number, pos\r\n        # アセンブリ\r\n        res = \"\"\r\n        # 行を分析\r\n        # Accept either a LINE_NUM token or a plain NUMBER (some lexers emit NUMBER for line labels)\r\n        if cu().type == \"LINE_NUM\":\r\n            linetok = ex(\"LINE_NUM\", \"is not line number\")\r\n        elif cu().type == \"NUMBER\":\r\n            linetok = ex(\"NUMBER\", \"is not line number\")\r\n        else:\r\n            # show what we actually have for easier debugging\r\n            print(\"expected LINE_NUM or NUMBER, got\", cu())\r\n            raise RuntimeError(f\"is not line number{cu()}\")\r\n        line += [linetok.value]\r\n        if (cu().type != \"KEYWORD\"):\r\n            return \"\"\r\n        res += f\"; LINE{linetok.value}\\n\"\r\n        res += f\"LINE{linetok.value}:\\n\"\r\n        match (cu().value):\r\n            case \"LET\":\r\n                ad()\r\n                mem = allocmem()\r\n                ident = ex(\"IDENT\", \"is not indent\")\r\n                op = ex(\"OP\", \"is not op\")\r\n                if op.value != \"=\":\r\n                    raise RuntimeError(f\"is not op{op}\")\r\n                computed = compute()\r\n                res += computed[0]\r\n                res += \"\\n\"\r\n                # メモリにセット\r\n                res += f\"; memset\\nSET {mem}, r{computed[1][0]}\\n\"\r\n                # 設定\r\n                Variable[ident.value] = mem\r\n                return res\r\n            case \"IF\":\r\n                ad()\r\n                cm = cmp()\r\n                res += cm[0]\r\n                res += \"\\n\"\r\n                # THENトークン\r\n                if not ex(\"KEYWORD\", \"THEN is no\").value == \"THEN\":\r\n                    print(\"THEN is no\")\r\n                    raise RuntimeError\r\n                number1 = ex(\"NUMBER\", \"number is no\")\r\n                flag = cu().value == \"ELSE\"\r\n                number2 = tokens[0]\r\n                if flag:\r\n                    ad()\r\n                    number2 = ex(\"NUMBER\", \"number is no\")\r\n                match(cm[1].value):\r\n                    case \"==\":\r\n                        # JE\r\n                        res += f\"; je to then number\\n\"\r\n                        res += f\"JE LINE{number1.value}\\n\"\r\n                        if flag:\r\n                            res += f\"; jmp to else\\n\"\r\n                            res += f\"JMP LINE{number2.value}\\n\"\r\n                    case \"!=\":\r\n                        # JNE\r\n                        res += f\"; je to then number\\n\"\r\n                        res += f\"JNE LINE{number1.value}\\n\"\r\n                        if flag:\r\n                            res += f\"; jmp to else\\n\"\r\n                            res += f\"JMP LINE{number2.value}\\n\"\r\n                    case \">\":\r\n                        # JA\r\n                        res += f\"; je to then number\\n\"\r\n                        res += f\"JA LINE{number1.value}\\n\"\r\n                        if flag:\r\n                            res += f\"; jmp to else\\n\"\r\n                            res += f\"JMP LINE{number2.value}\\n\"\r\n                    case \"<\":\r\n                        # JNAE\r\n                        res += f\"; je to then number\\n\"\r\n                        res += f\"JNAE LINE{number1.value}\\n\"\r\n                        if flag:\r\n                            res += f\"; jmp to else\\n\"\r\n                            res += f\"JMP LINE{number2.value}\\n\"\r\n                    case \">=\":\r\n                        # JAE\r\n                        res += f\"; je to then number\\n\"\r\n                        res += f\"JAE LINE{number1.value}\\n\"\r\n                        if flag:\r\n                            res += f\"; jmp to else\\n\"\r\n                            res += f\"JMP LINE{number2.value}\\n\"\r\n                    case \"<=\":\r\n                        # JNA\r\n                        res += f\"; je to then number\\n\"\r\n                        res += f\"JNA LINE{number1.value}\\n\"\r\n                        if flag:\r\n                            res += f\"; jmp to else\\n\"\r\n                            res += f\"JMP LINE{number2.value}\\n\"\r\n                    case _:\r\n                        return \"\"\r\n                return res\r\n            case \"GOTO\":\r\n                ad()\r\n                numtok = ex(\"NUMBER\", \"number is no\")\r\n                res += f\"; goto{numtok.value}\\n\"\r\n                res += f\"JMP LINE{numtok.value}\\n\"\r\n                return res\r\n            case \"FOR\":\r\n                \r\n                return res\r\n            case \"NEXT\":\r\n                return \"@BL@\"\r\n            case \"PRINT\":\r\n                res += \"; PRINT\\n\"\r\n                computed = compute()\r\n                return res\r\n            case \"INPUT\":\r\n                return res\r\n            case \"END\":\r\n                # HALT\r\n                return \"; Halt\\nHLT\"\r\n            case \"GOSUB\":\r\n                return res\r\n            case \"RETURN\":\r\n                return res\r\n            case \"STEP\":\r\n                return res\r\n            case \"TO\":\r\n                return res\r\n            case \"REM\":\r\n                while cu().type != \"NEWLINE\":\r\n                    ad()\r\n                return \"\"\r\n            case \"AND\":\r\n                return res\r\n            case \"OR\":\r\n                return res\r\n            case \"NOT\":\r\n                return res\r\n            case \"FUNC\":\r\n                return res\r\n            case \"RET\":\r\n                return res\r\n            case _:\r\n                # パスする\r\n                return \"\"\r\n        return \"\"\r\n    def cmp():\r\n        res = \"\"\r\n        a = compute()\r\n        op = cu()\r\n        ad()\r\n        b = compute()\r\n        res += f\"; CMP A B\\n\"\r\n        res += f\"{a[0]}\"\r\n        res += f\"{b[0]}\"\r\n        res += \"; CMP\\n\"\r\n        res += f\"CMP r{a[1][0]}, r{b[1][0]}\"\r\n        freereg(a[1][0])\r\n        freereg(b[1][0])\r\n        return (res, op)\r\n\r\n    def compute() -> tuple[str, list[int]]:\r\n        res = \"\"\r\n\r\n        regs = [allocreg()]\r\n        # 初期化\r\n        res += f\"; SetZero\\nLOAD r{regs[0]}, 0\\n\"\r\n        if cu().type == \"IDENT\":\r\n            print(\"inent\")\r\n            res = f\"; Get a memory\\nGET r{regs[0]}, {Variable[cu().value]}\\n\"\r\n            ad()\r\n            return (res, [regs[0]])\r\n        elif cu().type == \"NUMBER\":\r\n            print(\"number\")\r\n            res = f\"; Set a number\\nLOAD r{regs[0]}, {cu().value}\\n\"\r\n            ad()\r\n            return (res, [regs[0]])\r\n        else:\r\n            # トークン消費\r\n            ex(\"LPAREN\", \"There is no left parenthesis ( LPAREN. \")\r\n            # 計算をする\r\n            optok = cu()\r\n            ad()\r\n            print(\"op\")\r\n            # +,14,a\r\n            # ,消費\r\n            ex(\"COMMA\", \"is no left parenthesis , COMMA\")\r\n            if optok.type == \"CMPOP\":\r\n                #別の処理\r\n                pass\r\n            else:\r\n                while cu().type != \"RPAREN\":\r\n                    print(regs)\r\n                    computed = compute()\r\n                    regs += computed[1]\r\n                    res += computed[0]\r\n                    match (optok.value):\r\n                        case \"+\":\r\n                            res += f\"; ADD\\nADD r{regs[0]}, r{regs[1]}, r{regs[0]}\\n\"\r\n                            freereg(regs[1])\r\n                        case \"-\":\r\n                            res += f\"; SUB\\nSUB r{regs[0]}, r{regs[1]}, r{regs[0]}\\n\"\r\n                            freereg(regs[1])\r\n                        case \"*\":\r\n                            res += f\"; MUL\\nMUL r{regs[0]}, r{regs[1]}, r{regs[0]}\\n\"\r\n                            freereg(regs[1])\r\n                        case \"/\":\r\n                            res += f\"; DIV\\nDIV r{regs[0]}, r{regs[1]}, r{regs[0]}\\n\"\r\n                            freereg(regs[1])\r\n                        case \"MOD\":\r\n                            res += f\"; MOD\\nMOD r{regs[0]}, r{regs[1]}, r{regs[0]}\\n\"\r\n                            freereg(regs[1])\r\n                        case _:\r\n                            raise RuntimeError\r\n                    if cu().type == \"RPAREN\":\r\n                        break\r\n                    ex(\"COMMA\", \"is no left parenthesis , COMMA\")\r\n                    regs.pop()\r\n            # トークン消費\r\n            ex(\"RPAREN\", \"There is no left parenthesis ) RPAREN.\")\r\n            print(regs)\r\n            return (res, regs)\r\n    return stmt()"
        }
    ]
}