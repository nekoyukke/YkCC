# EBNF表記
<parse> := <parse_stmt>+
<parse_stmt> := parse_let | parse_val | parse_cont
<parse_let> := "let" <id> ":" parse_type ";" | "let" <id> ":" parse_type "=" parse_Calculation_coalesce ";"
<parse_val> := "val" <id> ":" parse_type ";" | "val" <id> ":" parse_type "=" parse_Calculation_coalesce ";"
<parse_cont> := "cont" <id> ":" parse_type "=" parse_Calculation_coalesce ";"
<parse_id> := id 
# 式演算系
<parse_Calculation_coalesce> := parse_Calculation_logicxor | parse_Calculation_logicxor "??" parse_Calculation_coalesce | parse_Calculation_logicxor ( "?:" | "?!" | "!" ) parse_Calculation_logicxor
<parse_Calculation_logicxor> := parse_Calculation_logicor { "^^" parse_Calculation_logicor}
<parse_Calculation_logicor> := parse_Calculation_logicand {"||" parse_Calculation_logicand}
<parse_Calculation_logicand> := parse_Calculation_comparison {"&&" parse_Calculation_comparison}
<parse_Calculation_comparison> := parse_Calculation_bitor ("==" | "!=" | "<" | ">" | "<=" | "<" | "===" | "!==" | "<=>") parse_Calculation_bitor
<parse_Calculation_bitor> := parse_Calculation_bitxor {"|" parse_Calculation_bitxor}
<parse_Calculation_bitxor> := parse_Calculation_bitand {"^" parse_Calculation_bitand}
<parse_Calculation_bitand> := parse_Calculation_shift {"&" parse_Calculation_shift}
<parse_Calculation_shift> := parse_Calculation_additive {"<<" parse_Calculation_unary | ">>" parse_Calculation_unary}
<parse_Calculation_additive> := parse_Calculation_multiplicative {"+" parse_Calculation_multiplicative | "-" parse_Calculation_multiplicative}
<parse_Calculation_multiplicative> := parse_Calculation_power {"*" parse_Calculation_power | "/" parse_Calculation_power}
<parse_Calculation_power> := parse_Calculation_unary {"**" parse_Calculation_unary}
<parse_Calculation_unary> := parse_Calculation_primary | "-" parse_Calculation_unary | "+" parse_Calculation_unary | "~" parse_Calculation_unary | "*" parse_Calculation_unary | "*" parse_Calculation_unary | "!" parse_Calculation_unary
<parse_Calculation_primary> := parse_Calculation_const | parse_Calculation_id
<parse_Calculation_id> := "(" parse_Calculation_coalesce ")" | id | id "[" parse_Calculation_coalesce "]"
<parse_Calculation_const> := number | strring
# その他
<id> := ["A-Za-z_"]+
<number> := ( "0"..."9" )+
<strring> := "'" ["A-Za-z_"]+ "'"
<parse_type> := "Int" | "Number" | "Float" | "Str" | "Char" | "Any" | "Dyn" | "Array" parse_type | "List" parse_type